#!/bin/sh

#
# swupdate - check and perform OpenBSD software updates
#
# CHANGE LOG:
#
# v0.1   - 2019-08-21 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial version.
# v0.2   - 2020-12-21 - Morgan Aldridge
#                       Prompt to reboot after install if kernel was changed
#                       by syspatch(8).
# v0.3   - 2021-02-26 - Morgan Aldridge
#                       Install firmware updates prior to syspatches. Safer
#                       check for root.
# v0.4   - 2021-05-27 - Morgan Aldridge
#                       Don't try to list/install syspatches on snapshots.
#                       Use checkrestart(8) after install, if available.
# v0.5   - 2023-03-29 - Morgan Aldridge
#                       Remove unused package dependencies after install.
#                       Retry installing patches if none installed, in case
#                       syspatch(8) was updated. Only prompt to restart if
#                       kernel was changed during syspatch(8) execution time.
#                       Fix error from fw_update(8) when listing pending
#                       updates.
# v0.6   - 2023-03-31 - Morgan Aldridge
#                       Round elapsed minutes since syspatch(8) execution began
#                       up to nearest minute. Only re-execute syspatch(8) if it
#                       updated itself during its execution time. Detects
#                       when kernel is in post-beta & pre-release window and
#                       appropriately uses snapshots.
# v0.6.1 - 2023-03-31 - Morgan Aldridge
#                       Drop privileges before executing ftp(1). Verbose
#                       output now notes when syspatch(8) is skipped due to
#                       running a snapshot.
# v0.7   - 2023-07-02 - Morgan Aldridge
#                       Detect when a newer release is available to install via
#                       sysupgrade(8) and prompt to install.
# v0.7.1 - 2023-07-04 - Morgan Aldridge
#                       Fixed bug in dermining whether a file had been modified
#                       during syspatch(8) execution. Code quality improvements.
# v0.8   - 2023-07-06 - Morgan Aldridge
#                       Added option for specifying base directory for local
#                       sets. Firmware updates are downloaded to local sets
#                       and installed from local sets.
#
# LICENSE:
#
# Copyright (c) 2019-2023 Morgan Aldridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

tool="$(basename "$0")"
verbose=false
reboot=false
local_sets_dir="/home/_swupdate"

usage() {
  echo "Usage: ${tool} [-v] [-b path] [-l | -d | -i]"
}

# drop root privileges before executing ftp(1)
unpriv_ftp() {
  # shellcheck disable=SC2145,SC2294
  eval su -s /bin/sh _pkgfetch -c "'ftp $@'"
}

is_snapshot() {
  if [ -z "$(sysctl -n kern.version | sed 's/^OpenBSD \([1-9][0-9]*\.[0-9]\)\([^ ]*\).*/\2/;q')" ] ; then
    false
  else
    true
  fi
}

# print the last valid URI from /etc/installurl, otherwise the default OpenBSD
# mirror URL
installurl() {
  _mirror=""
  while read -r _line; do
    _line="${_line%%#*}"
    [ -n "$_line" ] && echo "$_line" | grep "(file|ftp|http|https)://*" >/dev/null && _mirror="$_line"
  done </etc/installurl
  [ -z "$_mirror" ] && _mirror="https://cdn.openbsd.org/pub/OpenBSD"
  echo "$_mirror"
}

# print the kernel version
kern_version() {
  sysctl -n kern.version | sed 's/^OpenBSD \([1-9][0-9]*\.[0-9]\)\([^ ]*\).*/\1/;q'
}

# print the kernel's major version
next_kern_version() {
  _version="$(kern_version)"
  _major="$(echo "$_version" | cut -d . -f 1)"
  _minor="$(echo "$_version" | cut -d . -f 2)"
  _minor=$((_minor + 1))
  [ $_minor -gt 9 ] && _minor=0 && _major=$((_major + 1))
  echo "${_major}.${_minor}"
}

# exits with status 0 if the kernel version is in the small window of time
# post-beta and pre-release, otherwise exits with status 1
is_post_beta_pre_release() {
  _installurl="$(installurl)"
  _installurl="${_installurl%/}"

  # since the kernel version directory, including the packages subdirectory
  # are created during this window of time, the easiest solution I have is
  # to check for the the SHA256.sig file's existence
  ! unpriv_ftp -V -o - "${_installurl}/$(kern_version)/SHA256.sig" >/dev/null 2>&1
}

# exits with status 0 if no newer kernel version is available, otherwise exits
# with status 1
is_newest_release() {
  _installurl="$(installurl)"
  _installurl="${_installurl%/}"
  _arch="$(sysctl -n hw.machine)"
  _next_kern="$(next_kern_version)"

  # check for the kernel version directory, architecture subdirectory, plus
  # SHA256.sig and kernel files' existence
  ! unpriv_ftp -V -o - "${_installurl}/${_next_kern}/${_arch}/SHA256.sig" >/dev/null 2>&1 \
    && ! unpriv_ftp -V -o - "${_installurl}/${_next_kern}/${_arch}/bsd" >/dev/null 2>&1 \
    && ! unpriv_ftp -V -o - "${_installurl}/${_next_kern}/${_arch}/bsd.rd" >/dev/null 2>&1
}

# prints the current number of seconds since epoch
now() {
  date +%s
}

# prints the number of whole minutes elapsed since the specified start time ($1;
# in seconds since epoch), rounded up to the nearest minute
elapsed_minutes() {
  _seconds=$(($(now) - $1))
  _minutes=$((_seconds / 60))
  [ $((_seconds % 60)) -gt 0 ] && _minutes=$((_minutes + 1))
  echo $_minutes
}

# exits with status 0 if specified file ($1) has been modified more recently than
# the specified seconds since epoch ($2), otherwise exits with status 1
modified_since() {
  [ "$(find "$1" -type f -mmin "-$(elapsed_minutes "$2")" 2>/dev/null | wc -l)" -eq 1 ]
}

# downloads firmware
download_firmware() {
  install -d -o 0 -g 0 -m 0755 "${local_sets_dir}/firmware"
  fw_update -p "${local_sets_dir}/firmware" -F
}

# installs firmware
install_firmware() {
  fw_update -p "${local_sets_dir}/firmware"
}

# installs system patches
install_patches() {
  _result=0
  _start=$(now)

  if is_snapshot || is_post_beta_pre_release; then
    if $verbose; then echo "Skipping installing system patches (running snapshot)."; fi
    return 0
  fi

  if $verbose; then echo "Installing system patches..."; fi
  syspatch || _result=$?
  if [ $_result -eq 2 ] && modified_since "$(which syspatch)" "$_start"; then
    if $verbose; then echo "Installing system patches (syspatch updated itself)..."; fi
    _start=$(now)
    syspatch; _result=$?
  fi
  [ $_result -eq 0 ] && modified_since /bsd "$_start" && reboot=true
}

# exits with status 0 if sysupgrade and a newer release are available, otherwise
# exits with status 1
check_for_sysupgrade() {
  _version="$(kern_version)"
  if which sysupgrade >/dev/null 2>&1; then
    if is_snapshot || is_post_beta_pre_release; then
      if $verbose; then echo "Skipping checking for system upgrades (running snapshot)."; fi
      return 1
    else
      if $verbose; then echo "Checking for system upgrades..."; fi
      if is_newest_release; then
        if $verbose; then echo "OpenBSD ${_version} is the newest release available."; fi
        return 1
      else
        _next_version="$(next_kern_version)"
        _next_filename="$(next_kern_version | sed 's/\.//;q')"
        cat <<EOM
A newer OpenBSD ${_next_version} release is available to install via
sysupgrade(8).

See <https://www.openbsd.org/${_next_filename}.html> for details.

IMPORTANT: Please review the following detailed release notes,
errata, and upgrade guide BEFORE PROCEEDING for any changes
between ${_version} and ${_next_version} which might impact your software
or configuration:

* <https://www.openbsd.org/plus${_next_filename}.html>
* <https://www.openbsd.org/errata${_next_filename}.html>
* <https://www.openbsd.org/faq/upgrade${_next_filename}.html>

There are also usually post-upgrade steps which must be performed
manually.
EOM
      fi
    fi
  else
    if $verbose; then echo "Skipping checking for system upgrades (sysupgrade(8) not found)."; fi
  fi
}

# parse arguments
while getopts hvb:ldi arg; do
  case "$arg" in
    h)
      usage
      exit
      ;;
    b)
      local_sets_dir="${OPTARG#/}/_swupdate"
      ;;
    l|d|i)
      flag="$arg"
      ;;
    v)
      verbose=true
      ;;
    ?|*)
      usage
      exit 2
      ;;
  esac
done
shift $((OPTIND - 1))
[ $# -gt 0 ] && usage && exit 2

# require root
if [ "$(id -u)" -ne 0 ]; then
  echo "${tool}: need root privileges"
  exit 1
fi

case "$flag" in
  l)
    # list pending updates
    if $verbose; then echo "Checking for firmware updates..."; fi
    fw_update -n
    if is_snapshot || is_post_beta_pre_release; then
      if $verbose; then echo "Skipping checking for system patches (running snapshot)."; fi
    else
      if $verbose; then echo "Checking for system patches..."; fi
      syspatch -c
    fi
    if $verbose; then echo "Checking for updated packages..."; fi
    pkg_add -sxu
    check_for_sysupgrade
    ;;
  d)
    # download, but don't install pending updates
    if $verbose; then echo "Downloading firmware updates..."; fi
    download_firmware
    if $verbose; then echo "Downloading package updates..."; fi
    if is_snapshot || is_post_beta_pre_release; then
      pkg_add -nxu -Dsnap
    else
      pkg_add -nxu
    fi
    if check_for_sysupgrade; then
      if is_snapshot || is_post_beta_pre_release; then
        sysupgrade -ns
      else
        sysupgrade -nr
      fi
    fi
    ;;
  i)
    # install pending updates   
    if $verbose; then echo "Installing firmware updates..."; fi
    download_firmware && install_firmware
    install_patches
    if $verbose; then echo "Installing package updates..."; fi
    if is_snapshot || is_post_beta_pre_release; then
      pkg_add -xu -Dsnap
    else
      pkg_add -xu
    fi
    if $verbose; then echo "Uninstalling unused package dependencies..."; fi
    pkg_delete -xa
    if which checkrestart > /dev/null 2>&1 ; then
      if $verbose; then echo "Checking for processes needing a restart..."; fi
      checkrestart
    fi
    _now=""
    if $reboot && read -r _now?'A reboot is necessary. Reboot now (y/n)? ' ; then
      case "$_now" in
        Y|y)
          echo "Rebooting..."
          reboot
          ;;
        *)
          echo "Please remember to reboot!"
          ;;
      esac
    fi
    _install=""
    if check_for_sysupgrade && read -r _install?"Do you want to upgrade to OpenBSD $(next_kern_version) now (y/n)? "; then
      case "$_install" in
        Y|y)
          if is_snapshot || is_post_beta_pre_release; then
            sysupgrade -s
          else
            sysupgrade -r
          fi
          ;;
        *)
          echo "Skipping upgrade to OpenBSD $(next_kern_version)."
          ;;
      esac
    fi
    ;;
esac
