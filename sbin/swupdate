#!/bin/sh

#
# swupdate - check and perform OpenBSD software updates
#
# CHANGE LOG:
#
# v0.1   - 2019-08-21 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial version.
# v0.2   - 2020-12-21 - Morgan Aldridge
#                       Prompt to reboot after install if kernel was changed.
# v0.3   - 2021-02-26 - Morgan Aldridge
#                       Install firmware updates prior to syspatches. Safer
#                       check for root.
# v0.4   - 2021-05-27 - Morgan Aldridge
#                       Don't try to list/install syspatches on snapshots.
#                       Use checkrestart after install, if available.
# v0.5   - 2023-03-29 - Morgan Aldridge
#                       Remove unused package dependencies after install.
#                       Retry installing patches if none installed, in case
#                       syspatch was updated. Only prompt to restart if
#                       kernel was changed during syspatch execution time.
#                       Fix error from fw_update when listing pending
#                       updates.
# v0.6   - 2023-03-30 - Morgan Aldridge
#                       Round elapsed minutes since syspatch execution began
#                       up to nearest minute. Only re-execute syspatch if it
#                       updated itself during its execution time.
#
# LICENSE:
#
# Copyright (c) 2019-2023 Morgan Aldridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

tool="$(basename "$0")"
verbose=false

usage() {
  echo "Usage: ${tool} [-v] [-l | -d | -i]"
}

is_snapshot() {
  if [ -z "$(sysctl -n kern.version | sed 's/^OpenBSD \([1-9][0-9]*\.[0-9]\)\([^ ]*\).*/\2/;q')" ] ; then
    false
  else
    true
  fi
}

# prints the current number of seconds since epoch
now() {
  date +%s
}

# prints the number of whole minutes elapsed since the start time ($1 in seconds
# since epoch), rounded up to the nearest minute
elapsed_minutes() {
  _seconds=$(($(now) - $1))
  _minutes=$((_seconds / 60))
  [ $((_seconds % 60)) -gt 0 ] && _minutes=$((_minutes + 1))
  echo $_minutes
}

# exits with status 0 if specified file ($1) has been modified more recently than
# the specified seconds since epoch ($2), otherwise exits with status 1
modified_since() {
  [ $(find "$1" -type f -mmin "-$(elapsed_minutes $2)" >/dev/null | wc -l) -eq 1 ]
}

# installs system patches
install_patches() {
  _result=0
  _start=$(now)

  if $verbose; then echo "Installing system patches..."; fi
  syspatch || _result=$?
  if [ $_result -eq 2 ] && modified_since $(which syspatch) $_start; then
    if $verbose; then echo "Installing system patches (syspatch updated itself)..."; fi
    _start=$(now)
    syspatch; _result=$?
  fi
  [ $_result -eq 0 ] && modified_since /bsd $_start && reboot=true || reboot=false
}

# parse arguments
args=$(getopt vhldi $*)
if [ $? -ne 0 ]; then
  usage
  exit 2
fi

set -- $args
while [ $# -ne 0 ]; do
  case "$1" in
    "-h")
      usage
      exit
      ;;
    "-l"|"-d"|"-i")
      flag="$1"
      ;;
    "-v")
      verbose=true
      ;;
    "--")
      shift
      break
      ;;
  esac
  shift
done

# require root
if [ $(id -u) -ne 0 ]; then
  echo "${tool}: need root privileges"
  exit 1
fi

case "$flag" in
  "-l")
    # list pending updates
    if $verbose; then echo "Checking for firmware updates..."; fi
    fw_update -n
    if ! is_snapshot ; then
      if $verbose; then echo "Checking for system patches..."; fi
      syspatch -c
    fi
    if $verbose; then echo "Checking for updated packages..."; fi
    pkg_add -sxu
    ;;
  "-d")
    # download, but don't install pending updates
    if $verbose; then echo "Downloading firmware updates..."; fi
    fw_update -n
    if $verbose; then echo "Downloading package updates..."; fi
    pkg_add -nxu
    ;;
  "-i")
    # install pending updates   
    if $verbose; then echo "Installing firmware updates..."; fi
    fw_update
    if ! is_snapshot ; then
      install_patches
    fi
    if $verbose; then echo "Installing package updates..."; fi
    pkg_add -xu
    if $verbose; then echo "Uninstalling unused package dependencies..."; fi
    pkg_delete -xa
    if which checkrestart > /dev/null 2>&1 ; then
      if $verbose; then echo "Checking for processes needing a restart..."; fi
      checkrestart
    fi
    if $reboot && read now?'A reboot is necessary. Reboot now (y/n)? ' ; then
      case "$now" in
        Y|y)
          echo "Rebooting..."
          reboot
          ;;
        *)
          echo "Please remember to reboot!"
          ;;
      esac
    fi
    ;;
esac
